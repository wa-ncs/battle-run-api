# Repo Action 페이지에 나타날 이름 
name: Spring Boot & Gradle CI/CD
env:
  S3_BUCKET_NAME: elasticbeanstalk-ap-northeast-2-691389100901
  DEPLOY_PACKAGE_NAME: battle-run-api-${{ github.sha }}.zip
  EB_APPLICATION_NAME: Battle-run-api
  EB_ENVIRONMENT_NAME: Battlerunapi-env # 보통 앱 이름에 -env 형태로 자동 생성
# Event Trigger
# master branch에 push 또는 pull request가 발생할 경우 동작
# branch 단위 외에도, tag나 cron 식 등을 사용할 수 있음
on:
  push:
    branches: [ feature/30, develop, main ]
  # pull_request:
  #   branches: [ develop, main ]

jobs:
  build:
    # 실행 환경 지정
    runs-on: ubuntu-latest

    # Task의 sequence를 명시한다.
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'adopt'

      - uses: actions/checkout@v3
      - run: touch ./src/main/resources/env/prod.yml
      - run: echo "${{ secrets.PROD }}" > ./src/main/resources/env/prod.yml
      - run: cat ./src/main/resources/env/prod.yml

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew 

      # Build
      - name: Build with Gradle
        run: ./gradlew clean build -exclude-task test

      # 전송할 파일을 담을 디렉토리 생성
      - name: Make Directory for deliver
        run: mkdir deploy

      # Jar 파일 Copy
      - name: Copy Jar
        run: cp ./build/libs/*.jar ./deploy/

      - name: Prepare Beanstalk
        run: |
          cp Procfile ./deploy/Procfile
          cp -r .ebextensions ./deploy/.ebextensions
          cp -r .platform ./deploy/.platform

      # 압축파일 형태로 전달
      - name: Make zip file
        run: zip -r -qq -j ./${{ env.DEPLOY_PACKAGE_NAME }} ./deploy

      # S3 Bucket으로 copy
      - name: Deliver to AWS S3
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          aws s3 cp ./${{ env.DEPLOY_PACKAGE_NAME }} s3://${{ env.S3_BUCKET_NAME }}/ \
          --region ap-northeast-2 \
          --acl private
          
  deploy:
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      # - name: Deploy
      #   env:
      #     AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #     AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      #   run: |
      #     aws deploy create-deployment \
      #     --application-name battle-run-api \
      #     --deployment-group-name battle-run-deploy-group \
      #     --profile prod \
      #     --file-exists-behavior OVERWRITE \
      #     --s3-location bucket=${{ env.S3_BUCKET_NAME }},bundleType=zip,key=${{ env.DEPLOY_PACKAGE_NAME }} \
      #     --region ap-northeast-2
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.aws_access_key_id }}
          aws-secret-access-key: ${{ secrets.aws_secret_access_key }}
          aws-region: ap-northeast-2
          
      - name: Create new EBL app ver
        run: |
          aws elasticbeanstalk create-application-version \
          --application-name ${{ env.EB_APPLICATION_NAME }} \
          --source-bundle S3Bucket="${{ env.S3_BUCKET_NAME }}",S3Key="${{ env.DEPLOY_PACKAGE_NAME }}" \
          --version-label "${{ github.sha }}"
          
      - name: Deploy new app
        run: aws elasticbeanstalk update-environment --environment-name ${{ env.EB_ENVIRONMENT_NAME }} --version-label "${{ github.sha }}"
      - name: Print message on success finish
        run: echo "CD part finished successfully"