# Repo Action 페이지에 나타날 이름 
name: Spring Boot & Gradle CI/CD
env:
  S3_BUCKET_NAME: elasticbeanstalk-ap-northeast-2-691389100901
  DEPLOY_PACKAGE_NAME: battle-run-api-${{ github.sha }}.zip
  EB_APPLICATION_NAME: Battle-run-api
  EB_ENVIRONMENT_NAME: Battlerunapi-env # 보통 앱 이름에 -env 형태로 자동 생성
# Event Trigger
# master branch에 push 또는 pull request가 발생할 경우 동작
# branch 단위 외에도, tag나 cron 식 등을 사용할 수 있음
on:
  push:
    branches: [ feature/30, develop, main ]
  # pull_request:
  #   branches: [ develop, main ]

jobs:
  build:
    # 실행 환경 지정
    runs-on: ubuntu-latest

    # Task의 sequence를 명시한다.
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'adopt'

      - uses: actions/checkout@v3
      - run: touch ./src/main/resources/env/prod.yml
      - run: echo "${{ secrets.PROD }}" > ./src/main/resources/env/prod.yml
      - run: cat ./src/main/resources/env/prod.yml

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew 

      # Build
      - name: Build with Gradle
        run: ./gradlew clean build -exclude-task test

      - name: Generate deployment package
        run: |
          mkdir -p deploy \
          cp build/libs/*.jar deploy/application.jar \
          cp Procfile deploy/Procfile \
          cp -r .ebextensions deploy/.ebextensions \
          cd deploy && zip -r deploy.zip .
      # 압축파일 형태로 전달
      # - name: Make zip file
      #   run: zip -r -qq -j ./${{ env.DEPLOY_PACKAGE_NAME }} ./deploy

      # S3 Bucket으로 copy
      # - name: Deliver to AWS S3
      #   env:
      #     AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #     AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      #   run: |
      #     aws s3 cp ./${{ env.DEPLOY_PACKAGE_NAME }} s3://${{ env.S3_BUCKET_NAME }}/ \
      #     --region ap-northeast-2 \
      #     --acl private

      - name: Get current time
        uses: 1466587594/get-current-time@v2  # 빌드 완료 시간 가져오기
        id: current-time
        with:
          format: YYYY-MM-DDTHH-mm-ss
          utcOffset: "+09:00"

      - name: Show Current Time
        run: echo "CurrentTime=${{steps.current-time.outputs.formattedTime}}" # 빌드 완료 시간 출력하기
        shell: bash

        # gradle build를 통해 만들어진 jar 파일 beanstalk에 배포하기 위한 zip 파일로 만듬

        # Beanstalk Deploy 플러그인 사용
      - name: Deploy to EB
        uses: einaregilsson/beanstalk-deploy@v19
        with:
          aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}     # github secrets로 등록한 값 사용
          aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }} # github secrets로 등록한 값 사용
          application_name: ${{ EB_APPLICATION_NAME }}         # EB application 이름
          environment_name: ${{ EB_ENVIRONMENT_NAME }}    # EB environment 이름
          version_label: github-action-${{steps.current-time.outputs.formattedTime}}
          region: ap-northeast-2
          deployment_package: deploy/deploy.zip

  # deploy:
  #   runs-on: ubuntu-latest
  #   needs: [build]
  #   steps:
      # - name: Deploy
      #   env:
      #     AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #     AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      #   run: |
      #     aws deploy create-deployment \
      #     --application-name battle-run-api \
      #     --deployment-group-name battle-run-deploy-group \
      #     --profile prod \
      #     --file-exists-behavior OVERWRITE \
      #     --s3-location bucket=${{ env.S3_BUCKET_NAME }},bundleType=zip,key=${{ env.DEPLOY_PACKAGE_NAME }} \
      #     --region ap-northeast-2
      # - name: Configure AWS credentials
      #   uses: aws-actions/configure-aws-credentials@v1
      #   with:
      #     aws-access-key-id: ${{ secrets.aws_access_key_id }}
      #     aws-secret-access-key: ${{ secrets.aws_secret_access_key }}
      #     aws-region: ap-northeast-2
          
      # - name: Create new EBL app ver
      #   run: |
      #     aws elasticbeanstalk create-application-version \
      #     --application-name ${{ env.EB_APPLICATION_NAME }} \
      #     --source-bundle S3Bucket="${{ env.S3_BUCKET_NAME }}",S3Key="${{ env.DEPLOY_PACKAGE_NAME }}" \
      #     --version-label "${{ github.sha }}"
          
      # - name: Deploy new app
      #   run: aws elasticbeanstalk update-environment --environment-name ${{ env.EB_ENVIRONMENT_NAME }} --version-label "${{ github.sha }}"
      # - name: Print message on success finish
      #   run: echo "CD part finished successfully"